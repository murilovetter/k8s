name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Frontend Dependencies
      run: |
        cd apps/frontend
        npm ci
    
    - name: Install Backend Dependencies
      run: |
        cd apps/backend
        npm ci
    
    - name: Run Frontend Tests
      run: |
        cd apps/frontend
        npm test -- --coverage --watchAll=false
    
    - name: Run Backend Tests
      run: |
        cd apps/backend
        npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Update Helm dependencies
      run: |
        cd charts/k8s-demo
        helm dependency update
    
    - name: Deploy to Development
      run: |
        # Update image tags in values-dev.yaml
        sed -i "s|tag: latest|tag: ${{ github.sha }}|g" values-dev.yaml
        
        # Deploy using Helm
        helm upgrade --install k8s-demo-dev ./charts/k8s-demo \
          -f values-dev.yaml \
          --namespace k8s-demo-dev \
          --create-namespace \
          --set frontend.image.tag=${{ github.sha }} \
          --set backend.image.tag=${{ github.sha }} \
          --wait --timeout=10m
    
    - name: Verify development deployment
      run: |
        kubectl get pods -n k8s-demo-dev
        kubectl get services -n k8s-demo-dev
        kubectl get ingress -n k8s-demo-dev

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Update Helm dependencies
      run: |
        cd charts/k8s-demo
        helm dependency update
    
    - name: Deploy to Staging
      run: |
        # Update image tags in values-staging.yaml
        sed -i "s|tag: latest|tag: ${{ github.sha }}|g" values-staging.yaml
        
        # Deploy using Helm
        helm upgrade --install k8s-demo-staging ./charts/k8s-demo \
          -f values-staging.yaml \
          --namespace k8s-demo-staging \
          --create-namespace \
          --set frontend.image.tag=${{ github.sha }} \
          --set backend.image.tag=${{ github.sha }} \
          --wait --timeout=10m
    
    - name: Verify staging deployment
      run: |
        kubectl get pods -n k8s-demo-staging
        kubectl get services -n k8s-demo-staging
        kubectl get ingress -n k8s-demo-staging
